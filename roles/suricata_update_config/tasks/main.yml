---
- block:
    - name: "[sc-1] Load vars"
      include_vars:
        dir: "{{ playbook_dir }}/common"
        ignore_files:
          - "example-secrets.yml"
          - "example-main-vars.yml"
        ignore_unknown_extensions: yes
        extensions:
          - ""
          - "yaml"
          - "yml"
          - "json"

    - name: "[sc-2] Create Corelight-Suricata rule test config"
      template:
        src: corelight-suricata-testing.conf.j2
        dest: "{{ suricata_dir }}/suricata.yaml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      when: "'software_sensors' in group_names"

    - name: "[sc-3] Create Suricata-update config"
      template:
        src: suricata-update.conf.j2
        dest: "{{ suricata_update_dir }}/update.yaml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: "[sc-4] Create Suricata-update disable config"
      template:
        src: suricata-update-disable.conf.j2
        dest: "{{ suricata_update_dir }}/disable.conf"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: "[sc-5] Create Suricata-update enable config"
      template:
        src: suricata-update-enable.conf.j2
        dest: "{{ suricata_update_dir }}/enable.conf"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: "[sc-6] Create Suricata-update modify config"
      template:
        src: suricata-update-modify.conf.j2
        dest: "{{ suricata_update_dir }}/modify.conf"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: "[sc-7] Collect list of custom rules and write to a file"
      template:
        src: "custom-rule-file-list.yaml.j2"
        dest: "{{ role_path }}/vars/custom-rule-file-list.json"
        mode: '0644'
        owner: "{{ hostvars['localhost'].ansible_user }}"
        group: "{{ hostvars['localhost'].ansible_user }}"
      delegate_to: localhost

    - name: "[sc-8] Include custom rule file vars"
      include_vars:
        file: "{{ role_path }}/vars/custom-rule-file-list.json"

    # find existing custom rule files
    - name: "[sc-9] Collect list of existing custom rules and write to a file"
      template:
        src: "remove-rule-file-list.yaml.j2"
        dest: "{{ role_path }}/vars/{{ inventory_hostname }}-remove-rule-file-list.json"
        mode: '0644'
        owner: "{{ hostvars['localhost'].ansible_user }}"
        group: "{{ hostvars['localhost'].ansible_user }}"
      delegate_to: localhost
      changed_when: false
      throttle: 1

    # remove unused custom rules
    - name: "[sc-10] Remove {{ suricata_custom_rules_dir }}/*.rules that are not in common/files/suricata-custom-rules/"
      lineinfile:
        path: "{{ role_path }}/vars/{{ inventory_hostname }}-remove-rule-file-list.json"
        regexp: "^(.*){{ item.name }}$"
        state: absent
      with_items: "{{ custom_rule_files }}"
      changed_when: false
      delegate_to: localhost
      when: custom_rule_files is not none

    - name: "[sc-11] Include remove unused custom rules vars"
      include_vars:
        file: "{{ role_path }}/vars/{{ inventory_hostname }}-remove-rule-file-list.json"

    - name: "[sc-12] Remove unused custom rules files"
      file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ remove_rule_files }}"
      when: remove_rule_files is not none

    # copy custom rules to suricata host
    - name: "[sc-13] Copy Suricata Custom Rule files to suricata host"
      copy:
        src: "{{ item.a_path }}"
        dest: "{{ suricata_custom_rules_dir }}"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      with_items: "{{ custom_rule_files }}"
      register: results
      when: custom_rule_files is not none

    ################## cannot update sources until the suricata is running on the sensor

    - name: "[sc-14] Update Suricata-update Sources"
      shell: |
        source /etc/corelight-env/bin/activate
        suricata-update update-sources --no-check-certificate
      args:
        executable: /bin/bash
      changed_when: false
      become: no
      environment:
        http_proxy: "{{ http_proxy_env |d() }}"
        https_proxy: "{{ https_proxy_env |d() }}"

    # enable new sources
    - name: "[sc-15] Collect list of enabled sources"
      shell: |
        source /etc/corelight-env/bin/activate
        suricata-update list-enabled-sources
      args:
        executable: /bin/bash
      changed_when: false
      become: no
      register: enabled_sources

    - name: "[sc-16] List of enabled sources"
      debug:
        var: enabled_sources.stdout_lines

    - name: "[sc-17] Enable remote sources with secret-codes"
      shell: |
        source /etc/corelight-env/bin/activate
        suricata-update enable-source "{{ item.name }}" secret-code="{{ item.secret_code }}" --no-check-certificate
      args:
        executable: /bin/bash
      become: no
      with_items: "{{ suricata_secret_code_sources|default([]) }}"
      when: "item.name not in enabled_sources.stdout"
      no_log: true
      register: results

    - name: "[sc-18] enable remote sources with secret-codes results"
      debug:
        var: results.stdout_lines

    - name: "[sc-19] Enable remote sources without secret-codes"
      shell: |
        source /etc/corelight-env/bin/activate
        suricata-update enable-source "{{ item }}" --no-check-certificate
      args:
        executable: /bin/bash
      become: no
      with_items: "{{ suricata_remote_sources|default([]) }}"
      when: "item not in enabled_sources.stdout"
      register: results

    - name: "[sc-20] enable remote sources without secret-codes results"
      debug:
        var: results.stdout_lines

    - name: "[sc-21] Enable remote sources not in the index"
      shell: |
        source /etc/corelight-env/bin/activate
        suricata-update add-source "{{ item.name }}" "{{ item.url }}" --no-check-certificate
      args:
        executable: /bin/bash
      become: no
      with_items: "{{ suricata_custom_url_sources|default([]) }}"
      when: "item.name not in enabled_sources.stdout"
      register: results

    - name: "[sc-22] enable remote sources not in the index results"
      debug:
        var: results.stdout_lines

    # remove unused sources
    - name: "[sc-23] Remove Suricata-update remote sources tasks"
      include_tasks: remove-sources.yml
      loop: "{{ enabled_sources.stdout_lines | select('match', '^  - [a-z]') | list | regex_replace('  - ') }}"
      when:
        - "item not in (suricata_remote_sources|default([])|string)"
        - "item not in (suricata_secret_code_sources|default([])|string)"
        - "item not in (suricata_custom_url_sources|default([])|string)"
      register: results

    - name: "[sc-24] remove suricata-update sources results"
      debug:
        var: results.stdout_lines


  always:
    - name: "[sc-25] Include set role facts tasks"
      include_tasks: "{{ role_path }}/../common/tasks/set-role-facts.yml"
      vars:
        fact_section: suricata_update
        fact_option: config
        fact_value: success
        failed_task: none
        failed_state: absent
      when: ansible_failed_task is not defined

  rescue:
    - name: "[sc-26] Include set role failed facts tasks"
      include_tasks: "{{ role_path }}/../common/tasks/set-role-facts.yml"
      vars:
        fact_section: suricata_update
        fact_option: config
        fact_value: failed
        failed_task: "{{ ansible_failed_task.name }}"
        failed_state: present
      when: ansible_failed_task is defined

    - name: "[sc-27] Failed task"
      fail:
        msg: |
          "{{ ansible_failed_result.stderr_lines | to_nice_yaml }}"
